<?xml version="1.0"?>
<project name="CloudKidAnimation" default="build-all" basedir="./">
	<property file="${os.name}.build.properties"/>
	<property file="build/build.properties"/>
	
	<target name="import-example-libs" description="Copy the files specified in dependencies.txt to examples project">
		<fail unless="libs" message="libs needs to be specified in build.properties as the bower libs to install" />
		<exec executable="${bower}" failonerror="true">
			<arg line="install" />
			<arg line="${libs}" />
		</exec>
	</target>
	
	<macrodef name="docs-config">
		<attribute name="template" default="${docs.config}" />
		<attribute name="file" default="temp.json" />
		<sequential>
			<copy file="@{template}" tofile="@{file}" overwrite="true" />
			<replaceregexp file="@{file}" match="\$\{docs\.description\}" replace="${docs.description}" flags="g" />
			<replaceregexp file="@{file}" match="\$\{docs\.name\}" replace="${docs.name}" flags="g" />
			<replaceregexp file="@{file}" match="\$\{version\}" replace="${version}" flags="g" />
			<replaceregexp file="@{file}" match="\$\{docs\.outdir\}" replace="${docs.outdir}" flags="g" />
			<replaceregexp file="@{file}" match="\$\{docs\.logo\}" replace="${docs.logo}" flags="g" />
			<replaceregexp file="temp.json" match="\$\{docs\.helpers\}" replace="${docs.helpers}" flags="g" />
			<replaceregexp file="temp.json" match="\$\{docs\.themedir\}" replace="${docs.themedir}" flags="g" />
		</sequential>
	</macrodef>
		
	<macrodef name="docs-cleanup">
		<attribute name="file" default="temp.json" />
		<sequential>
			<delete file="@{file}" />
		</sequential>
	</macrodef>
	
	<target name="docs" description="Use YUIDoc to build the documentation for this library.">
		<docs-config />
		<exec executable="${docs}">
			<arg line="${source.dir}" />
			<arg line="--config temp.json" />
		</exec>
		<docs-cleanup />
	</target>

	<target name="docs-server" description="Set up a server to show a real-time preview of the docs page.  Visit http://127.0.0.1:3000/ and refresh to see changes">
		<docs-config />
		<exec executable="${docs}">
			<arg line="--server" />
			<arg line="--config temp.json" />
			<arg line="${source.dir}" />
		</exec>
		<docs-cleanup />
	</target>

	<target name="docs-to-git" description="Auto-sync the docs to the Git docs branch">
		<antcall target="docs" />
		<delete dir="../${docs.outdir}" />
		<copy todir="../${docs.outdir}">
			<fileset dir="${docs.outdir}"/>
		</copy>
		<!-- Switch the branch -->
		<exec executable="${git}" failonerror="true">
			<arg line="checkout" />
			<arg line="${git.docs}" />
		</exec>
		<delete includeEmptyDirs="true">
			<fileset dir="." />
		</delete>
		<copy todir="./" overwrite="true">
			<fileset dir="../${docs.outdir}" includes="**/*">
				<depth max="3" />
			</fileset>
		</copy>
		<delete dir="../${docs.outdir}" />
		<!-- Add the files -->
		<exec executable="${git}" failonerror="true">
			<arg line="add" />
			<arg line="-A" />
			<arg line="." />
		</exec>
		<!-- Commit the files -->
		<exec executable="${git}" failonerror="true">
			<arg line="commit" />
			<arg line="-m" />
			<arg line='"Auto updated docs"' />
		</exec>
		<!-- Sync the files -->
		<exec executable="${git}" failonerror="true">
			<arg line="push" />
			<arg line="origin" />
			<arg line="${git.docs}" />
		</exec>
		<!-- Switch the branch back -->
		<exec executable="${git}" failonerror="true">
			<arg line="checkout" />
			<arg line="${git.master}" />
		</exec>
	</target>
</project>