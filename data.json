{
    "project": {
        "name": "CreateJSDisplay",
        "description": "Renderer plugin for CloudKid Framework",
        "version": "0.0.1",
        "url": "http://github.com/CloudKidStudio/CreateJSDisplay"
    },
    "files": {
        "src/scaling/Positioner.js": {
            "name": "src/scaling/Positioner.js",
            "modules": {
                "cloudkid": 1
            },
            "classes": {
                "Positioner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/scaling/ScreenSettings.js": {
            "name": "src/scaling/ScreenSettings.js",
            "modules": {},
            "classes": {
                "ScreenSettings": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/scaling/UIElement.js": {
            "name": "src/scaling/UIElement.js",
            "modules": {},
            "classes": {
                "UIElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/scaling/UIElementSettings.js": {
            "name": "src/scaling/UIElementSettings.js",
            "modules": {},
            "classes": {
                "UIElementSettings": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/scaling/UIScaler.js": {
            "name": "src/scaling/UIScaler.js",
            "modules": {},
            "classes": {
                "UIScaler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Animator.js": {
            "name": "src/Animator.js",
            "modules": {},
            "classes": {
                "Animator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/AnimatorTimeline.js": {
            "name": "src/AnimatorTimeline.js",
            "modules": {},
            "classes": {
                "AnimatorTimeline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Button.js": {
            "name": "src/Button.js",
            "modules": {},
            "classes": {
                "Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/CharacterClip.js": {
            "name": "src/CharacterClip.js",
            "modules": {},
            "classes": {
                "CharacterClip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/CharacterController.js": {
            "name": "src/CharacterController.js",
            "modules": {},
            "classes": {
                "CharacterController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/CreateJSDisplay.js": {
            "name": "src/CreateJSDisplay.js",
            "modules": {},
            "classes": {
                "CreateJSDisplay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/DragManager.js": {
            "name": "src/DragManager.js",
            "modules": {},
            "classes": {
                "DragManager": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "cloudkid": {
            "name": "cloudkid",
            "submodules": {},
            "classes": {
                "Positioner": 1,
                "ScreenSettings": 1,
                "UIElement": 1,
                "UIElementSettings": 1,
                "UIScaler": 1,
                "Animator": 1,
                "AnimatorTimeline": 1,
                "Button": 1,
                "CharacterClip": 1,
                "CharacterController": 1,
                "CreateJSDisplay": 1,
                "DragManager": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/DragManager.js",
            "line": 8,
            "description": "Initially layouts all interface elements",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "The screen width in pixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The screen height in pixels",
                    "type": "Number"
                },
                {
                    "name": "ppi",
                    "description": "The screen pixel density (PPI)",
                    "type": "Number"
                }
            ]
        }
    },
    "classes": {
        "Positioner": {
            "name": "Positioner",
            "shortname": "Positioner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/scaling/Positioner.js",
            "line": 5,
            "description": "Initially layouts all interface elements"
        },
        "ScreenSettings": {
            "name": "ScreenSettings",
            "shortname": "ScreenSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/scaling/ScreenSettings.js",
            "line": 5,
            "description": "Object that contains the screen settings to help scaling"
        },
        "UIElement": {
            "name": "UIElement",
            "shortname": "UIElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/scaling/UIElement.js",
            "line": 8,
            "description": "A single UI item that needs to be resized"
        },
        "UIElementSettings": {
            "name": "UIElementSettings",
            "shortname": "UIElementSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/scaling/UIElementSettings.js",
            "line": 5,
            "description": "The UI Item Settings which is the positioning settings used to adjust each element"
        },
        "UIScaler": {
            "name": "UIScaler",
            "shortname": "UIScaler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/scaling/UIScaler.js",
            "line": 10,
            "description": "The UI scale is responsible for scaling UI components\nto help easy the burden of different device aspect ratios"
        },
        "Animator": {
            "name": "Animator",
            "shortname": "Animator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/Animator.js",
            "line": 12,
            "description": "Animator is a static class designed to provided\nbase animation functionality, using frame labels of MovieClips",
            "static": 1
        },
        "AnimatorTimeline": {
            "name": "AnimatorTimeline",
            "shortname": "AnimatorTimeline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/AnimatorTimeline.js",
            "line": 8,
            "description": "Animator Timeline is a class designed to provide\nbase animation functionality",
            "is_constructor": 1
        },
        "Button": {
            "name": "Button",
            "shortname": "Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/Button.js",
            "line": 8,
            "description": "A Multipurpose button class. It is designed to have one image, and an optional text label.\nThe button can be a normal button or a selectable button.\nThe button functions similarly with both CreateJS and PIXI, but slightly differently in\ninitialization and callbacks. Add event listeners for click and mouseover to know about \nbutton clicks and mouse overs, respectively.",
            "extends": "createjs.Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "imageSettings",
                    "description": "Information about the art to be used for button states, as well as if the button is selectable or not.\n       If this is an Image or Canvas element, then the button assumes that the image is full width and 3 images\n       tall, in the order (top to bottom) up, over, down. If so, then the properties of imageSettings are ignored.",
                    "type": "Object|Image|HTMLCanvasElement",
                    "optional": true,
                    "props": [
                        {
                            "name": "image",
                            "description": "The image to use for all of the button states.",
                            "type": "Image|HTMLCanvasElement",
                            "optional": true
                        },
                        {
                            "name": "priority",
                            "description": "The state priority order. If omitted, defaults to [\"disabled\", \"down\", \"over\", \"up\"].\n       Previous versions of Button used a hard coded order: [\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"].",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "up",
                            "description": "The visual information about the up state.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were \n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "over",
                            "description": "The visual information about the over state. If omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were \n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "down",
                            "description": "The visual information about the down state. If omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were \n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "disabled",
                            "description": "The visual information about the disabled state. If omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were \n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override \n       data in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "<yourCustomState>",
                            "description": "The visual information about a custom state found in imageSettings.priority.\n       Any state added this way has a property of the same name added to the button. Examples of previous states that have been\n       moved to this system are \"selected\" and \"highlighted\".",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels \n       were trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter \n       override data in the label parameter for this button state only. All values except \"text\" from the label parameter may be\n       overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "origin",
                            "description": "An optional offset for all button graphics, in case you want button \n       positioning to not include a highlight glow, or any other reason you would want to offset the button art and label.",
                            "type": "createjs.Point",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null",
                    "props": [
                        {
                            "name": "text",
                            "description": "The text to display on the label.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "font",
                            "description": "The font name and size to use on the label, as createjs.Text expects.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "color",
                            "description": "The color of the text to use on the label, as createjs.Text expects.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "textBaseline",
                            "description": "The baseline for the label text, as createjs.Text expects.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"middle\""
                        },
                        {
                            "name": "stroke",
                            "description": "The stroke to use for the label text, if desired, as createjs.Text (CloudKid fork only) expects.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "shadow",
                            "description": "A shadow object to apply to the label text.",
                            "type": "createjs.Shadow",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "x",
                            "description": "An x position to place the label text at relative to the button. If omitted,\n       \"center\" is used, which attempts to horizontally center the label on the button.",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        },
                        {
                            "name": "y",
                            "description": "A y position to place the label text at relative to the button. If omitted,\n       \"center\" is used, which attempts to vertically center the label on the button. This may be unreliable -\n       see documentation for createjs.Text.getMeasuredLineHeight().",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        }
                    ]
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "CharacterClip": {
            "name": "CharacterClip",
            "shortname": "CharacterClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/CharacterClip.js",
            "line": 8,
            "description": "CharacterClip is used by the CharacterController class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "event",
                    "description": "Animator event to play",
                    "type": "String"
                },
                {
                    "name": "loops",
                    "description": "The number of loops",
                    "type": "Int"
                }
            ]
        },
        "CharacterController": {
            "name": "CharacterController",
            "shortname": "CharacterController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/CharacterController.js",
            "line": 11,
            "description": "Character Controller class is designed to play animated\nsequences on the timeline. This is a flexible way to\nanimate characters on a timeline"
        },
        "CreateJSDisplay": {
            "name": "CreateJSDisplay",
            "shortname": "CreateJSDisplay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/CreateJSDisplay.js",
            "line": 8,
            "description": "CreateJSDisplay is a display plugin for the CloudKid Framework \n\tthat uses the EaselJS library for rendering.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas element on the page to draw to.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The setup data for the CreateJS stage.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "stageType",
                            "description": "If the stage should be a normal stage or a SpriteStage (use \"spriteStage\").",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"stage\""
                        },
                        {
                            "name": "clearView",
                            "description": "If the stage should wipe the canvas between renders.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "mouseOverRate",
                            "description": "How many times per second to check for mouseovers. To disable them, use 0 or -1.",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "30"
                        }
                    ]
                }
            ]
        },
        "DragManager": {
            "name": "DragManager",
            "shortname": "DragManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/DragManager.js",
            "line": 8,
            "description": "Drag manager is responsible for handling the dragging of stage elements.\nSupports click-n-stick (click to start, move mouse, click to release) and click-n-drag (standard dragging) functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage that this DragManager is monitoring.",
                    "type": "createjs.Stage"
                },
                {
                    "name": "startCallback",
                    "description": "The callback when when starting",
                    "type": "Function"
                },
                {
                    "name": "endCallback",
                    "description": "The callback when ending",
                    "type": "Function"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/scaling/Positioner.js",
            "line": 15,
            "description": "Initial position of all layout items",
            "itemtype": "method",
            "name": "positionItems",
            "static": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "itemSettings",
                    "description": "JSON format with position information",
                    "type": "Object"
                }
            ],
            "class": "Positioner",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/Positioner.js",
            "line": 59,
            "description": "Create the polygon hit area for interface elements",
            "static": 1,
            "itemtype": "method",
            "name": "generateHitArea",
            "params": [
                {
                    "name": "hitArea",
                    "description": "One of the following: <br/>\n* An array of points for a polygon, e.g. \n\n\t\t[{x:0, y:0}, {x:0, y:20}, {x:20, y:0}]\n\n* An object describing a rectangle, e.g.\n\n\t\t{type:\"rect\", x:0, y:0, w:10, h:30}\n\n* An object describing an ellipse, where x and y are the center, e.g. \n\n\t\t{type:\"ellipse\", x:0, y:0, w:10, h:30}\n\n* An object describing a circle, where x and y are the center, e.g.\n\n\t\t{type:\"circle\", x:0, y:0, r:20}",
                    "type": "Object|Array"
                },
                {
                    "name": "scale=1",
                    "description": "The size to scale hitArea by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A geometric shape object for hit testing, either a Polygon, Rectangle, Ellipse, or Circle,\n    depending on the hitArea object. The shape will have a contains() function for hit testing.",
                "type": "Object"
            },
            "class": "Positioner",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/ScreenSettings.js",
            "line": 16,
            "description": "The screen width in pixels",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "ScreenSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/ScreenSettings.js",
            "line": 22,
            "description": "The screen height in pixels",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "ScreenSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/ScreenSettings.js",
            "line": 28,
            "description": "The screen pixel density (PPI)",
            "itemtype": "property",
            "name": "ppi",
            "type": "Number",
            "class": "ScreenSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 75,
            "description": "Original horizontal margin in pixels",
            "itemtype": "property",
            "name": "origMarginHori",
            "type": "Number",
            "default": "0",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 82,
            "description": "Original vertical margin in pixels",
            "itemtype": "property",
            "name": "origMarginVert",
            "type": "Number",
            "default": "0",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 89,
            "description": "Original width in pixels",
            "itemtype": "property",
            "name": "origWidth",
            "type": "Number",
            "default": "0",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 96,
            "description": "Original X scale of the item",
            "itemtype": "property",
            "name": "origScaleX",
            "type": "Number",
            "default": "0",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 103,
            "description": "The original Y scale of the item",
            "itemtype": "property",
            "name": "origScaleY",
            "type": "Number",
            "default": "0",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 110,
            "description": "The original bounds of the item with x, y, right, bottom, width, height properties.\nUsed to determine the distance to each edge of the item from its origin",
            "itemtype": "property",
            "name": "origBounds",
            "type": "Object",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 117,
            "description": "The reference to the scale settings",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_settings",
            "type": "UIElementSettings",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 124,
            "description": "The reference to the interface item we're scaling",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_item",
            "type": "createjs.DisplayObject|PIXI.DisplayObject",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 131,
            "description": "The original screen the item was designed for",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_designedScreen",
            "type": "ScreenSettings",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 138,
            "description": "Adjust the item scale and position, to reflect new screen",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "newScreen",
                    "description": "The current screen settings",
                    "type": "ScreenSettings"
                }
            ],
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElement.js",
            "line": 238,
            "description": "Destroy this item, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElementSettings.js",
            "line": 15,
            "description": "What vertical screen location the item should be aligned to: \"top\", \"center\", \"bottom\"",
            "itemtype": "property",
            "name": "vertAlign",
            "type": "String",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElementSettings.js",
            "line": 21,
            "description": "What horizontal screen location the item should be aligned to: \"left\", \"center\", \"right\"",
            "itemtype": "property",
            "name": "horiAlign",
            "type": "String",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElementSettings.js",
            "line": 27,
            "description": "If this element should be aligned to the title safe area, not the actual screen",
            "itemtype": "property",
            "name": "titleSafe",
            "type": "Boolean",
            "default": "false",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElementSettings.js",
            "line": 34,
            "description": "Maximum scale allowed in physical size",
            "itemtype": "property",
            "name": "maxScale",
            "type": "Number",
            "default": "1",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElementSettings.js",
            "line": 41,
            "description": "Minimum scale allowed in physical size",
            "itemtype": "property",
            "name": "minScale",
            "type": "Number",
            "default": "1",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIElementSettings.js",
            "line": 48,
            "description": "If the UI element is centered horizontally",
            "itemtype": "property",
            "name": "centeredHorizontally",
            "type": "Boolean",
            "default": "false",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 32,
            "description": "The current screen settings",
            "itemtype": "property",
            "name": "currentScreen",
            "type": "ScreenSettings",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 40,
            "description": "If the screensize has been set",
            "itemtype": "property",
            "name": "initialized",
            "type": "Boolean",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 48,
            "description": "The UI display object to update",
            "itemtype": "property",
            "name": "_parent",
            "type": "createjs.DisplayObject",
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 55,
            "description": "The screen settings object, contains information about designed size",
            "itemtype": "property",
            "name": "_designedScreen",
            "type": "ScreenSettings",
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 62,
            "description": "The configuration for each items",
            "itemtype": "property",
            "name": "_items",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 69,
            "description": "Vertically align to the top",
            "itemtype": "property",
            "name": "ALIGN_TOP",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"top\"",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 79,
            "description": "Vertically align to the bottom",
            "itemtype": "property",
            "name": "ALIGN_BOTTOM",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"bottom\"",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 89,
            "description": "Horizontally align to the left",
            "itemtype": "property",
            "name": "ALIGN_LEFT",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"left\"",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 99,
            "description": "Horizontally align to the right",
            "itemtype": "property",
            "name": "ALIGN_RIGHT",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"right\"",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 109,
            "description": "Vertically or horizontally align to the center",
            "itemtype": "property",
            "name": "ALIGN_CENTER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"center\"",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 119,
            "description": "Create the scaler from JSON data",
            "itemtype": "method",
            "name": "fromJSON",
            "static": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "The UI display container",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "jsonSettings",
                    "description": "The json of the designed settings {designedWidth:800, designedHeight:600, designedPPI:72}",
                    "type": "Object"
                },
                {
                    "name": "jsonItems",
                    "description": "The json items object where the keys are the name of the property on the parent and the value\n       is an object with keys of \"titleSafe\", \"minScale\", \"maxScale\", \"centerHorizontally\", \"align\"",
                    "type": "Object"
                },
                {
                    "name": "immediateDestroy",
                    "description": "If we should immediately cleanup the UIScaler after scaling items",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The scaler object that can be reused",
                "type": "UIScaler"
            },
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 182,
            "description": "Set the current screen settings. If the stage size changes at all, re-call this function",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "screenWidth",
                    "description": "The fullscreen width",
                    "type": "Number"
                },
                {
                    "name": "screenHeight",
                    "description": "The fullscreen height",
                    "type": "Number"
                },
                {
                    "name": "screenPPI",
                    "description": "The screen resolution density",
                    "type": "Number"
                }
            ],
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 198,
            "description": "Get the current scale of the screen",
            "itemtype": "method",
            "name": "getScale",
            "return": {
                "description": "The current stage scale",
                "type": "Number"
            },
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 208,
            "description": "Manually add an item",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "item",
                    "description": "The display object item to add",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "vertAlign",
                    "description": "The vertical align of the item (cefault is center)",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"center\""
                },
                {
                    "name": "horiAlign",
                    "description": "The horizontal align of the item (default is center)",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"center\""
                },
                {
                    "name": "titleSafe",
                    "description": "If the item needs to be in the title safe area (default is false)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "minScale",
                    "description": "The minimum scale amount (default, scales the same size as the stage)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "maxScale",
                    "description": "The maximum scale amount (default, scales the same size as the stage)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "centeredHorizontally",
                    "description": "Makes sure that the center of the object was at the center of the screen, assuming an origin at the top left of the object",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 234,
            "description": "Scale a single background image according to the UIScaler.width and height",
            "itemtype": "method",
            "name": "resizeBackground",
            "static": 1,
            "params": [
                {
                    "name": "The",
                    "description": "bitmap to scale",
                    "type": "createjs.Bitmap"
                }
            ],
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 256,
            "description": "Convenience function to scale a collection of backgrounds",
            "itemtype": "method",
            "name": "resizeBackgrounds",
            "static": 1,
            "params": [
                {
                    "name": "bitmaps",
                    "description": "The collection of bitmap images",
                    "type": "Array"
                }
            ],
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 270,
            "description": "Scale the UI items that have been registered to the current screen",
            "itemtype": "method",
            "name": "resize",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/scaling/UIScaler.js",
            "line": 285,
            "description": "Destroy the scaler object",
            "itemtype": "method",
            "name": "destroy",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 21,
            "description": "The current version of the Animator class",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 30,
            "description": "If we fire debug statements",
            "itemtype": "property",
            "name": "debug",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 39,
            "description": "The instance of cloudkid.Audio or cloudkid.Sound for playing audio along with animations.\nThis MUST be set in order to play synced animations.",
            "itemtype": "property",
            "name": "soundLib",
            "type": "cloudkid.Audio|cloudkid.Sound",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 49,
            "description": "The global captions object to use with animator",
            "itemtype": "property",
            "name": "captions",
            "type": "cloudkid.Captions",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 57,
            "description": "The collection of timelines",
            "itemtype": "property",
            "name": "_timelines",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 65,
            "description": "A collection of timelines for removal - kept out here so it doesn't need to be\nreallocated every frame",
            "itemtype": "property",
            "name": "_removedTimelines",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 74,
            "itemtype": "property",
            "name": "_timelinesMap",
            "type": "Dictionary",
            "access": "private",
            "tagname": "",
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 81,
            "description": "If the Animator is paused",
            "itemtype": "property",
            "name": "_paused",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 89,
            "description": "An empty object to avoid creating new objects in play()\nwhen an options object is not used for parameters.",
            "itemtype": "property",
            "name": "_optionsHelper",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 98,
            "description": "Sets the variables of the Animator to their defaults. Use when _timelines is null,\nif the Animator data was cleaned up but was needed again later.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 114,
            "description": "Stops all animations and cleans up the variables used.",
            "itemtype": "method",
            "name": "destroy",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 132,
            "description": "Play an animation for a frame label event",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to animate",
                    "type": "AnimatorTimeline"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose stop\")",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The object of optional parameters or onComplete callback function",
                    "type": "Object|function",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "The callback function when the animation is done",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "onCompleteParams",
                            "description": "Parameters to pass to onComplete function",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "startTime",
                            "description": "The time in milliseconds into the animation to start. A value of -1 makes the animation play at a random startTime.",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "speed",
                            "description": "The speed at which to play the animation.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "soundData",
                            "description": "soundData Data about a sound to sync the animation to, as an alias or in the format {alias:\"MyAlias\", start:0}.\n\t\tstart is the seconds into the animation to start playing the sound. If it is omitted or soundData is a string, it defaults to 0.",
                            "type": "Object|String",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "doCancelledCallback",
                            "description": "Should an overridden animation's callback function still run?",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "AnimatorTimeline"
            },
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 217,
            "description": "Play an animation for a frame label event, starting at a random frame within the animation",
            "itemtype": "method",
            "name": "playAtRandomFrame",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to animate.",
                    "type": "AnimatorTimeline"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose_stop\").",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The object of optional parameters or onComplete callback function",
                    "type": "Object|function",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "The callback function when the animation is done",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "onCompleteParams",
                            "description": "Parameters to pass to onComplete function",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "speed",
                            "description": "The speed at which to play the animation.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "soundData",
                            "description": "soundData Data about a sound to sync the animation to, as an alias or in the format {alias:\"MyAlias\", start:0}.\n\t\tstart is the seconds into the animation to start playing the sound. If it is omitted or soundData is a string, it defaults to 0.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "doCancelledCallback",
                            "description": "Should an overridden animation's callback function still run?",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "AnimatorTimeline"
            },
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 238,
            "description": "Creates the AnimatorTimeline for a given animation",
            "itemtype": "method",
            "name": "_makeTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to animate",
                    "type": "easeljs.MovieClip"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose stop\")",
                    "type": "String"
                },
                {
                    "name": "onComplete",
                    "description": "The function to callback when we're done",
                    "type": "Function"
                },
                {
                    "name": "onCompleteParams",
                    "description": "Parameters to pass to onComplete function",
                    "type": "Function"
                },
                {
                    "name": "speed",
                    "description": "The speed at which to play the animation.",
                    "type": "Number"
                },
                {
                    "name": "soundData",
                    "description": "Data about sound to sync the animation to.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "AnimatorTimeline"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 324,
            "description": "Determines if a given instance can be animated by Animator, to allow things that aren't\n\tMovieClips from EaselJS to be animated if they share the same API. Note - 'id' is a property with\n\ta unique value for each createjs.DisplayObject. If a custom object is made that does not inherit from DisplayObject,\n\tit needs to not have an id that is identical to anything from EaselJS.",
            "itemtype": "method",
            "name": "_canAnimate",
            "params": [
                {
                    "name": "instance",
                    "description": "The object to check for animation properties.",
                    "type": "easeljs.MovieClip"
                }
            ],
            "return": {
                "description": "If the instance can be animated or not.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 355,
            "description": "Checks if animation exists",
            "itemtype": "method",
            "name": "_makeTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to check",
                    "type": "easeljs.MovieClip"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose stop\")",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "does this animation exist?",
                "type": "Bool"
            },
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 388,
            "description": "Stop the animation.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "instance",
                    "description": "The MovieClip to stop the action on",
                    "type": "createjs.MovieClip"
                },
                {
                    "name": "doOnComplete",
                    "description": "If we are suppose to do the complete callback when stopping (default is false)",
                    "type": "Bool"
                }
            ],
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 414,
            "description": "Stop all current Animator animations.\nThis is good for cleaning up all animation, as it doesn't do a callback on any of them.",
            "itemtype": "method",
            "name": "stopAll",
            "params": [
                {
                    "name": "container",
                    "description": "Optional - specify a container to stop timelines contained within",
                    "type": "createjs.Container"
                }
            ],
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 440,
            "description": "Remove a timeline from the stack",
            "itemtype": "method",
            "name": "_remove",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "AnimatorTimeline"
                },
                {
                    "name": "doOnComplete",
                    "description": "If we do the on complete callback",
                    "type": "Bool"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 497,
            "description": "Pause all tweens which have been excuted by Animator.play()",
            "itemtype": "method",
            "name": "pause",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 518,
            "description": "Resumes all tweens executed by the Animator.play()",
            "itemtype": "method",
            "name": "resume",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 540,
            "description": "Pauses or unpauses all timelines that are children of the specified DisplayObjectContainer.",
            "itemtype": "method",
            "name": "pauseInGroup",
            "params": [
                {
                    "name": "paused",
                    "description": "If this should be paused or unpaused",
                    "type": "Bool"
                },
                {
                    "name": "container",
                    "description": "The container to stop timelines contained within",
                    "type": "createjs.Container"
                }
            ],
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 562,
            "description": "Get the timeline object for an instance",
            "itemtype": "method",
            "name": "getTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "MovieClip",
                    "type": "createjs.MovieClip"
                }
            ],
            "return": {
                "description": "The timeline",
                "type": "AnimatorTimeline"
            },
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 581,
            "description": "Whether the Animator class is currently paused.",
            "itemtype": "method",
            "name": "getPaused",
            "return": {
                "description": "if we're paused or not",
                "type": "Bool"
            },
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 592,
            "description": "Start the updating",
            "itemtype": "method",
            "name": "_startUpdate",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 605,
            "description": "Stop the updating",
            "itemtype": "method",
            "name": "_stopUpdate",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 618,
            "description": "The update every frame",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time in milliseconds since the last frame",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 710,
            "description": "The sound has been started",
            "itemtype": "method",
            "name": "onSoundStarted",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "AnimatorTimeline"
                }
            ],
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 722,
            "description": "The sound is done",
            "itemtype": "method",
            "name": "onSoundDone",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "AnimatorTimeline"
                }
            ],
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 735,
            "description": "Check to see if we have timeline",
            "itemtype": "method",
            "name": "_hasTimelines",
            "return": {
                "description": "if we have timelines",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 749,
            "description": "String representation of this class",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String"
            },
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 20,
            "description": "The event to callback when we're done",
            "itemtype": "event",
            "name": "onComplete",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 27,
            "description": "The parameters to pass when completed",
            "itemtype": "property",
            "name": "onCompleteParams",
            "type": "Array",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 34,
            "description": "The event label",
            "itemtype": "property",
            "name": "event",
            "type": "String",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 41,
            "description": "The instance of the timeline to animate",
            "itemtype": "property",
            "name": "instance",
            "type": "AnimatorTimeline",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 48,
            "description": "The frame number of the first frame",
            "itemtype": "property",
            "name": "firstFrame",
            "type": "Int",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 55,
            "description": "The frame number of the last frame",
            "itemtype": "property",
            "name": "lastFrame",
            "type": "Int",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 62,
            "description": "If the animation loops - determined by looking to see if it ends in \" stop\" or \" loop\"",
            "itemtype": "property",
            "name": "isLooping",
            "type": "Bool",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 69,
            "description": "Ensure we show the last frame before looping",
            "itemtype": "property",
            "name": "isLastFrame",
            "type": "Bool",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 76,
            "description": "length of timeline in frames",
            "itemtype": "property",
            "name": "length",
            "type": "Int",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 83,
            "description": "If this timeline plays captions",
            "itemtype": "property",
            "name": "useCaptions",
            "type": "Bool",
            "readonly": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 91,
            "description": "If the timeline is paused.",
            "itemtype": "property",
            "name": "_paused",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 99,
            "description": "Sets and gets the animation's paused status.",
            "itemtype": "property",
            "name": "paused",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 120,
            "description": "The animation start time in seconds on the movieclip's timeline.",
            "itemtype": "property",
            "name": "startTime",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 126,
            "description": "The animation duration in seconds.",
            "itemtype": "property",
            "name": "duration",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 132,
            "description": "The animation speed. Default is 1.",
            "itemtype": "property",
            "name": "speed",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 138,
            "description": "The position of the animation in seconds.",
            "itemtype": "property",
            "name": "time",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 144,
            "description": "Sound alias to sync to during the animation.",
            "itemtype": "property",
            "name": "soundAlias",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 150,
            "description": "A sound instance object from cloudkid.Sound or cloudkid.Audio, used for tracking sound position.",
            "itemtype": "property",
            "name": "soundInst",
            "type": "Object",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 156,
            "description": "If the timeline will, but has yet to play a sound.",
            "itemtype": "property",
            "name": "playSound",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 162,
            "description": "The time (seconds) into the animation that the sound starts.",
            "itemtype": "property",
            "name": "soundStart",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 168,
            "description": "The time (seconds) into the animation that the sound ends",
            "itemtype": "property",
            "name": "soundEnd",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 84,
            "description": "The sprite that is the body of the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "back",
            "type": "createjs.Bitmap",
            "readonly": "",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 92,
            "description": "The text field of the button. The label is centered by both width and height on the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "label",
            "type": "createjs.Text",
            "readonly": "",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 101,
            "description": "Callback for mouse over, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_overCB",
            "type": "Function",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 108,
            "description": "Callback for mouse out, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_outCB",
            "type": "Function",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 115,
            "description": "Callback for mouse down, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_downCB",
            "type": "Function",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 122,
            "description": "Callback for press up, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_upCB",
            "type": "Function",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 129,
            "description": "Callback for click, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_clickCB",
            "type": "Function",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 136,
            "description": "A dictionary of state booleans, keyed by state name.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateFlags",
            "type": "Object",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 142,
            "description": "An array of state names (Strings), in their order of priority.\nThe standard order previously was [\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"].",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_statePriority",
            "type": "Array",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 150,
            "description": "A dictionary of state graphic data, keyed by state name.\nEach object contains the sourceRect (src) and optionally 'trim', another Rectangle.\nAdditionally, each object will contain a 'label' object if the button has a text label.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateData",
            "type": "Object",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 159,
            "description": "The width of the button art, independent of the scaling of the button itself.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_width",
            "type": "Number",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 166,
            "description": "The height of the button art, independent of the scaling of the button itself.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_height",
            "type": "Number",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 173,
            "description": "An offset to button positioning, generally used to adjust for a highlight around the button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_offset",
            "type": "createjs.Point",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 180,
            "description": "An event for when the button is pressed (while enabled).",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "BUTTON_PRESS",
            "type": "String",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 203,
            "description": "Constructor for the button when using CreateJS.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "imageSettings",
                    "description": "See the constructor for more information",
                    "type": "Object|Image|HTMLCanvasElement",
                    "optional": true
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 357,
            "description": "The width of the button, based on the width of back. This value is affected by scale.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 368,
            "description": "The height of the button, based on the height of back. This value is affected by scale.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 379,
            "description": "Sets the text of the label. This does nothing if the button was not initialized with a label.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "The text to set the label to.",
                    "type": "String"
                }
            ],
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 413,
            "description": "Whether or not the button is enabled.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "default": "true",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 446,
            "description": "Adds a property to the button. Setting the property sets the value in\n_stateFlags and calls _updateState().",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_addProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "The property name to add to the button.",
                    "type": "String"
                }
            ],
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 468,
            "description": "Updates back based on the current button state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updateState",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 523,
            "description": "The callback for when the button receives a mouse down event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseDown",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 536,
            "description": "The callback for when the button for when the mouse/touch is released on the button\n- only when the button was held down initially.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseUp",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 551,
            "description": "The callback for when the button the button is clicked or tapped on. This is\nthe most reliable way of detecting mouse up/touch end events that are on this button\nwhile letting the pressup event handle the mouse up/touch ends on and outside the button.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onClick",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 563,
            "description": "The callback for when the button is moused over.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseOver",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 574,
            "description": "The callback for when the mouse leaves the button area.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseOut",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 585,
            "description": "Destroys the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 605,
            "description": "Generates a desaturated up state as a disabled state, and an update with a solid colored glow for a highlighted state.",
            "itemtype": "method",
            "name": "generateDefaultStates",
            "static": 1,
            "params": [
                {
                    "name": "image",
                    "description": "The image to use for all of the button states, in the standard up/over/down format.",
                    "type": "Image|HTMLCanvasElement"
                },
                {
                    "name": "disabledSettings",
                    "description": "The settings object for the disabled state. If omitted, no disabled state is created.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "saturation",
                            "description": "The saturation adjustment for the disabled state. \n       100 is fully saturated, 0 is unchanged, -100 is desaturated.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "brightness",
                            "description": "The brightness adjustment for the disabled state. \n       100 is fully bright, 0 is unchanged, -100 is completely dark.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "contrast",
                            "description": "The contrast adjustment for the disabled state. \n       100 is full contrast, 0 is unchanged, -100 is no contrast.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "highlightSettings",
                    "description": "The settings object for the highlight state. If omitted, no state is created.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "How many pixels to make the glow, eg 8 for an 8 pixel increase on each side.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "red",
                            "description": "The red value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "green",
                            "description": "The green value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "blue",
                            "description": "The blue value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "alpha",
                            "description": "The alpha value for the glow, from 0 to 255, with 0 being transparent and 255 fully opaque.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterClip.js",
            "line": 23,
            "description": "The event to play",
            "itemtype": "property",
            "name": "event",
            "type": "String",
            "class": "CharacterClip",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterClip.js",
            "line": 30,
            "description": "The number of times to loop",
            "itemtype": "property",
            "name": "loops",
            "type": "Int",
            "class": "CharacterClip",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterClip.js",
            "line": 37,
            "description": "Initialiaze this character clip",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "event",
                    "description": "The frame label to play using Animator.play",
                    "type": "String"
                },
                {
                    "name": "loops",
                    "description": "The number of times to loop, default of 0 plays continuously",
                    "type": "Int"
                }
            ],
            "class": "CharacterClip",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 25,
            "description": "The current stack of animations to play",
            "itemtype": "property",
            "name": "_animationStack",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 33,
            "description": "The currently playing animation",
            "itemtype": "property",
            "name": "_currentAnimation",
            "type": "CharacterClip",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 41,
            "description": "Current number of loops for the current animation",
            "itemtype": "property",
            "name": "_loops",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 49,
            "description": "If the current animation choreographies can't be interrupted",
            "itemtype": "property",
            "name": "_interruptable",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 57,
            "description": "If frame dropping is allowed for this animation set",
            "itemtype": "property",
            "name": "_allowFrameDropping",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 65,
            "description": "The current character",
            "itemtype": "property",
            "name": "_character",
            "type": "createjs.MovieClip",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 73,
            "description": "Callback function for playing animation",
            "itemtype": "property",
            "name": "_callback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 81,
            "description": "If this instance has been destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 89,
            "description": "Initiliazes this Character controller",
            "itemtype": "method",
            "name": "initialize",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 99,
            "description": "Set the current character, setting to null clears character",
            "itemtype": "method",
            "name": "setCharacter",
            "params": [
                {
                    "name": "character",
                    "description": "MovieClip",
                    "type": "createjs.MovieClip"
                }
            ],
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 116,
            "description": "If we want to play a static frame",
            "itemtype": "method",
            "name": "gotoFrameAndStop",
            "params": [
                {
                    "name": "event",
                    "description": "The frame label to stop on",
                    "type": "String"
                }
            ],
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 130,
            "description": "Will play a sequence of animations",
            "itemtype": "method",
            "name": "playClips",
            "params": [
                {
                    "name": "clips",
                    "description": "an array of CharacterClip objects",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the animations are either done, or\n            have been interrupted. Will pass true is interrupted,\n            false if they completed",
                    "type": "Function"
                },
                {
                    "name": "interruptable",
                    "description": "If calling this can interrupt the current animation(s)",
                    "type": "Bool"
                },
                {
                    "name": "cancelPreviousCallback",
                    "description": "Cancel the callback the last time this was called",
                    "type": "Bool"
                },
                {
                    "name": "allowFrameDropping",
                    "description": "If frame dropping is allowed for this frame, if the Animator is doing frame drop checks",
                    "type": "Bool"
                }
            ],
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 173,
            "description": "Start the next animation in the sequence",
            "itemtype": "method",
            "name": "startNext",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 201,
            "description": "When the animation has completed playing",
            "itemtype": "method",
            "name": "_animationComplete",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 227,
            "description": "Clear any animations for the current character",
            "itemtype": "method",
            "name": "clear",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 245,
            "description": "Don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 50,
            "description": "the canvas managed by this display",
            "itemtype": "property",
            "name": "canvas",
            "type": "DOMElement",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 58,
            "description": "The DOM id for the canvas",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 66,
            "description": "Convenience method for getting the width of the canvas element\nwould be the same thing as canvas.width",
            "itemtype": "property",
            "name": "width",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 75,
            "description": "Convenience method for getting the height of the canvas element\nwould be the same thing as canvas.height",
            "itemtype": "property",
            "name": "height",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 84,
            "description": "The rendering library's stage element, the root display object",
            "itemtype": "property",
            "name": "",
            "type": "createjs.Stage|createjs.SpriteStage",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 92,
            "description": "If rendering is paused on this display only. Pausing all displays can be done\nusing Application.paused setter.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 100,
            "description": "The rate at which EaselJS calculates mouseover events, in times/second.",
            "itemtype": "property",
            "name": "mouseOverRate",
            "type": "Int",
            "access": "public",
            "tagname": "",
            "default": "30",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 108,
            "description": "If input is enabled on the stage.",
            "itemtype": "property",
            "name": "_enabled",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 115,
            "description": "If input is enabled on the stage for this display. The default is true.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 140,
            "description": "If the display is visible.",
            "itemtype": "property",
            "name": "_visible",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 147,
            "description": "If the display is visible, using \"display: none\" css on the canvas. Invisible displays won't render.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 161,
            "description": "Resizes the canvas. This is only called by the Application.",
            "itemtype": "method",
            "name": "resize",
            "internal": "",
            "params": [
                {
                    "name": "width",
                    "description": "The width that the display should be",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The height that the display should be",
                    "type": "Int"
                }
            ],
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 174,
            "description": "Updates the stage and draws it. This is only called by the Application. \nThis method does nothing if paused is true or visible is false.",
            "itemtype": "method",
            "name": "render",
            "internal": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame.",
                    "type": "Int"
                }
            ],
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 188,
            "description": "Destroys the display. This method is called by the Application and should \nnot be called directly, use Application.removeDisplay(id). \nThe stage recursively removes all display objects here.",
            "itemtype": "method",
            "name": "destroy",
            "internal": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 23,
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 26,
            "description": "The object that's being dragged",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "draggedObj",
            "type": "createjs.DisplayObject",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 34,
            "description": "The radius in pixel to allow for dragging, or else does sticky click",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dragStartThreshold",
            "default": "20",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 42,
            "description": "The position x, y of the mouse down on the stage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "mouseDownStagePos",
            "type": "Object",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 49,
            "description": "The position x, y of the object when interaction with it started.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "mouseDownObjPos",
            "type": "Object",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 56,
            "description": "If sticky click dragging is allowed.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "allowStickyClick",
            "type": "Bool",
            "default": "true",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 64,
            "description": "Is the move touch based",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isTouchMove",
            "type": "Bool",
            "default": "false",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 73,
            "description": "Is the drag being held on mouse down (not sticky clicking)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isHeldDrag",
            "type": "Bool",
            "default": "false",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 82,
            "description": "Is the drag a sticky clicking (click on a item, then mouse the mouse)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isStickyClick",
            "type": "Bool",
            "default": "false",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 91,
            "description": "Settings for snapping.\n\n Format for snapping to a list of points:\n\t{\n\t\tmode:\"points\",\n\t\tdist:20,//snap when within 20 pixels/units\n\t\tpoints:[\n\t\t\t{ x: 20, y:30 },\n\t\t\t{ x: 50, y:10 }\n\t\t]\n\t}",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "snapSettings",
            "type": "Object",
            "default": "null",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 110,
            "description": "Reference to the stage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_theStage",
            "type": "CreatejsStage",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 117,
            "description": "The local to global position of the drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragOffset",
            "type": "createjs.Point",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 124,
            "description": "Callback when we start dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragStartCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 131,
            "description": "Callback when we are done dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragEndCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 138,
            "description": "Callback to test for the start a held drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_triggerHeldDragCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 145,
            "description": "Callback to start a sticky click drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_triggerStickyClickCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 152,
            "description": "Callback when we are done with the drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stageMouseUpCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 159,
            "description": "The collection of draggable objects",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_draggableObjects",
            "type": "Array",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 166,
            "description": "The function call when the mouse/touch moves",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_updateCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 173,
            "description": "A point for reuse instead of lots of object creation.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_helperPoint",
            "type": "createjs.Point",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 180,
            "description": "Constructor",
            "itemtype": "method",
            "name": "initialize",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage that this DragManager is monitoring.",
                    "type": "createjs.Stage"
                },
                {
                    "name": "startCallback",
                    "description": "The callback when when starting",
                    "type": "Function"
                },
                {
                    "name": "endCallback",
                    "description": "The callback when ending",
                    "type": "Function"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 202,
            "description": "Manually starts dragging an object. If a mouse down event is not supplied as the second argument, it \n   defaults to a held drag, that ends as soon as the mouse is released.",
            "itemtype": "method",
            "name": "startDrag",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "ev",
                    "description": "A mouse down event to listen to to determine what type of drag should be used.",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 215,
            "description": "Mouse down on an obmect",
            "itemtype": "method",
            "name": "_objMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "A mouse down event to listen to to determine what type of drag should be used.",
                    "type": "createjs.MouseEvent"
                },
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 271,
            "description": "Start the sticky click",
            "itemtype": "method",
            "name": "_triggerStickyClick",
            "access": "private",
            "tagname": "",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 284,
            "description": "Start hold dragging",
            "itemtype": "method",
            "name": "_triggerHeldDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "The mouse down event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 303,
            "description": "Internal start dragging on the stage",
            "itemtype": "method",
            "name": "_startDrag",
            "access": "private",
            "tagname": "",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 319,
            "description": "Stops dragging the currently dragged object.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stopDrag",
            "params": [
                {
                    "name": "doCallback",
                    "description": "If the drag end callback should be called. Default is false.",
                    "type": "Bool"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 330,
            "description": "Internal stop dragging on the stage",
            "itemtype": "method",
            "name": "_stopDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "Mouse up event",
                    "type": "createjs.MouseEvent"
                },
                {
                    "name": "doCallback",
                    "description": "If we should do the callback",
                    "type": "Bool"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 353,
            "description": "Update the object position based on the mouse",
            "itemtype": "method",
            "name": "_updateObjPosition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "Mouse move event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 385,
            "description": "Handles snapping the dragged object to the nearest among a list of points",
            "itemtype": "method",
            "name": "_handlePointSnap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "localMousePos",
                    "description": "The mouse position in the same space as the dragged object.",
                    "type": "createjs.Point"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 453,
            "description": "Adds properties and functions to the object - use enableDrag() and disableDrag() on \nobjects to enable/disable them (they start out disabled). Properties added to objects:\n_dragBounds (Rectangle), _onMouseDownListener (Function), _dragMan (cloudkid.DragManager) reference to the DragManager\nthese will override any existing properties of the same name",
            "itemtype": "method",
            "name": "addObject",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "bound",
                    "description": "The rectangle bounds",
                    "type": "createjs.Rectangle"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 484,
            "description": "Removes properties and functions added by addObject().",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 503,
            "description": "Destroy the manager",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 539,
            "class": "DragManager",
            "module": "cloudkid"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:98"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:114"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:132"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:217"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:238"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:324"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:355"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:388"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:414"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:440"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:497"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:518"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:540"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:562"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:581"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:592"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:605"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:618"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:735"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:749"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterClip.js:37"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:89"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:99"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:116"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:130"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:173"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:201"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:227"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:245"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/CreateJSDisplay.js:161"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/CreateJSDisplay.js:174"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/CreateJSDisplay.js:188"
        },
        {
            "message": "Missing item type",
            "line": " src/DragManager.js:23"
        },
        {
            "message": "Missing item type",
            "line": " src/DragManager.js:539"
        }
    ]
}