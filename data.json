{
    "project": {
        "name": "CreateJSDisplay",
        "description": "Renderer plugin for CloudKid Framework",
        "version": "0.0.1",
        "url": "http://github.com/CloudKidStudio/CreateJSDisplay"
    },
    "files": {
        "src/Animator.js": {
            "name": "src/Animator.js",
            "modules": {
                "cloudkid": 1
            },
            "classes": {
                "Animator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/AnimatorTimeline.js": {
            "name": "src/AnimatorTimeline.js",
            "modules": {},
            "classes": {
                "AnimatorTimeline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/BitmapMovieClip.js": {
            "name": "src/BitmapMovieClip.js",
            "modules": {},
            "classes": {
                "BitmapMovieClip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/BitmapUtils.js": {
            "name": "src/BitmapUtils.js",
            "modules": {},
            "classes": {
                "BitmapUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Button.js": {
            "name": "src/Button.js",
            "modules": {},
            "classes": {
                "Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/CharacterClip.js": {
            "name": "src/CharacterClip.js",
            "modules": {},
            "classes": {
                "CharacterClip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/CharacterController.js": {
            "name": "src/CharacterController.js",
            "modules": {},
            "classes": {
                "CharacterController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/CreateJSDisplay.js": {
            "name": "src/CreateJSDisplay.js",
            "modules": {},
            "classes": {
                "CreateJSDisplay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/DragManager.js": {
            "name": "src/DragManager.js",
            "modules": {},
            "classes": {
                "DragManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/TextureAtlas.js": {
            "name": "src/TextureAtlas.js",
            "modules": {},
            "classes": {
                "TextureAtlas": 1,
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "cloudkid": {
            "name": "cloudkid",
            "submodules": {},
            "classes": {
                "Animator": 1,
                "AnimatorTimeline": 1,
                "BitmapMovieClip": 1,
                "BitmapUtils": 1,
                "Button": 1,
                "CharacterClip": 1,
                "CharacterController": 1,
                "CreateJSDisplay": 1,
                "DragManager": 1,
                "TextureAtlas": 1,
                "Texture": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/TextureAtlas.js",
            "line": 145
        }
    },
    "classes": {
        "Animator": {
            "name": "Animator",
            "shortname": "Animator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/Animator.js",
            "line": 12,
            "description": "Animator is a static class designed to provided\nbase animation functionality, using frame labels of MovieClips",
            "static": 1
        },
        "AnimatorTimeline": {
            "name": "AnimatorTimeline",
            "shortname": "AnimatorTimeline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/AnimatorTimeline.js",
            "line": 8,
            "description": "Animator Timeline is a class designed to provide\nbase animation functionality",
            "is_constructor": 1
        },
        "BitmapMovieClip": {
            "name": "BitmapMovieClip",
            "shortname": "BitmapMovieClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/BitmapMovieClip.js",
            "line": 3,
            "description": "A class similar to createjs.MovieClip, but made to play animations from a cloudkid.TextureAtlas.\nThe CreateJS Sprite class requires a spritesheet with equal sized and spaced frames. By using cloudkid.TextureAtlas,\nyou can use a much smaller spritesheet, sprites on screen with fewer extra transparent pixels, and use the same\nAPI as MovieClip.\n\nSee \"Export BitmapMovieClip.jsfl\" in the library for a script that will export a selected MovieClip in the library\nwith all of the information (except data.scale) needed to reassemble the BitmapMovieClip.",
            "extends": "createjs.Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "atlas=null",
                    "description": "The texture atlas to pull frames from.",
                    "type": "TextureAtlas"
                },
                {
                    "name": "data=null",
                    "description": "Initialization data",
                    "type": "Object"
                },
                {
                    "name": "data.fps",
                    "description": "Framerate to play the movieclip at. Omitting this will use the current framerate.",
                    "type": "Int",
                    "optional": true
                },
                {
                    "name": "data.labels",
                    "description": "A dictionary of the labels in the movieclip to assist in playing animations.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "data.origin",
                    "description": "The origin of the movieclip.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{x:0,y:0}"
                },
                {
                    "name": "data.frames",
                    "description": "An array of frame sequences to pull from the texture atlas.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "data.frames.name",
                    "description": "The name to use for the frame sequence. This should include a \"#\" to be replaced with the image number.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data.frames.min",
                    "description": "The first frame number in the frame sequence.",
                    "type": "Int",
                    "optional": true
                },
                {
                    "name": "data.frames.max",
                    "description": "The last frame number in the frame sequence.",
                    "type": "Int",
                    "optional": true
                },
                {
                    "name": "data.frames.digits",
                    "description": "The maximum number of digits in the names of the frames, e.g. myAnim0001 has 4 digits.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "4"
                },
                {
                    "name": "data.scale",
                    "description": "The scale at which the art was exported, e.g. a scale of 1.4 means the art was increased\n        in size to 140% before exporting and should be scaled back down before drawing to the screen.\n\nFormat for data:\n\t{\n\t\tfps:30,\n\t\tlabels:\n\t\t{\n\t\t\tanimStart:0,\n\t\t\tanimStart_loop:15\n\t\t},\n\t\torigin:{ x: 20, y:30 },\n\t\tframes:\n\t\t[\n\t\t\t{\n\t\t\t\tname:\"myAnim#\",\n\t\t\t\tmin:1,\n\t\t\t\tmax:20,\n\t\t\t\tdigits:4\n\t\t\t}\n\t\t],\n\t\tscale:1\n\t}\n\n The object describes a 30 fps animation that is 20 frames long, and was originally myAnim0001.png->myAnim0020.png,\n with frame labels on the first and 16th frame. 'digits' is optional, and defaults to 4.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ]
        },
        "BitmapUtils": {
            "name": "BitmapUtils",
            "shortname": "BitmapUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/BitmapUtils.js",
            "line": 8,
            "description": "Designed to provide utility related to Bitmaps."
        },
        "Button": {
            "name": "Button",
            "shortname": "Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/Button.js",
            "line": 8,
            "description": "A Multipurpose button class. It is designed to have one image, and an optional text label.\nThe button can be a normal button or a selectable button.\nThe button functions similarly with both CreateJS and PIXI, but slightly differently in\ninitialization and callbacks. Add event listeners for click and mouseover to know about \nbutton clicks and mouse overs, respectively.",
            "extends": "createjs.Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "imageSettings",
                    "description": "Information about the art to be used for button states, as well as if the button is selectable or not.\n       If this is an Image or Canvas element, then the button assumes that the image is full width and 3 images\n       tall, in the order (top to bottom) up, over, down. If so, then the properties of imageSettings are ignored.",
                    "type": "Object|Image|HTMLCanvasElement",
                    "optional": true,
                    "props": [
                        {
                            "name": "image",
                            "description": "The image to use for all of the button states.",
                            "type": "Image|HTMLCanvasElement",
                            "optional": true
                        },
                        {
                            "name": "priority",
                            "description": "The state priority order. If omitted, defaults to [\"disabled\", \"down\", \"over\", \"up\"].\n       Previous versions of Button used a hard coded order: [\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"].",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "up",
                            "description": "The visual information about the up state.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were \n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "over",
                            "description": "The visual information about the over state. If omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were \n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "down",
                            "description": "The visual information about the down state. If omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were \n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "disabled",
                            "description": "The visual information about the disabled state. If omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were \n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override \n       data in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "<yourCustomState>",
                            "description": "The visual information about a custom state found in imageSettings.priority.\n       Any state added this way has a property of the same name added to the button. Examples of previous states that have been\n       moved to this system are \"selected\" and \"highlighted\".",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels \n       were trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter \n       override data in the label parameter for this button state only. All values except \"text\" from the label parameter may be\n       overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "origin",
                            "description": "An optional offset for all button graphics, in case you want button \n       positioning to not include a highlight glow, or any other reason you would want to offset the button art and label.",
                            "type": "createjs.Point",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null",
                    "props": [
                        {
                            "name": "text",
                            "description": "The text to display on the label.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "font",
                            "description": "The font name and size to use on the label, as createjs.Text expects.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "color",
                            "description": "The color of the text to use on the label, as createjs.Text expects.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "textBaseline",
                            "description": "The baseline for the label text, as createjs.Text expects.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"middle\""
                        },
                        {
                            "name": "stroke",
                            "description": "The stroke to use for the label text, if desired, as createjs.Text (CloudKid fork only) expects.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "shadow",
                            "description": "A shadow object to apply to the label text.",
                            "type": "createjs.Shadow",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "x",
                            "description": "An x position to place the label text at relative to the button. If omitted,\n       \"center\" is used, which attempts to horizontally center the label on the button.",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        },
                        {
                            "name": "y",
                            "description": "A y position to place the label text at relative to the button. If omitted,\n       \"center\" is used, which attempts to vertically center the label on the button. This may be unreliable -\n       see documentation for createjs.Text.getMeasuredLineHeight().",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        }
                    ]
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "CharacterClip": {
            "name": "CharacterClip",
            "shortname": "CharacterClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/CharacterClip.js",
            "line": 8,
            "description": "CharacterClip is used by the CharacterController class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "event",
                    "description": "Animator event to play",
                    "type": "String"
                },
                {
                    "name": "loops",
                    "description": "The number of loops",
                    "type": "Int"
                }
            ]
        },
        "CharacterController": {
            "name": "CharacterController",
            "shortname": "CharacterController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/CharacterController.js",
            "line": 11,
            "description": "Character Controller class is designed to play animated\nsequences on the timeline. This is a flexible way to\nanimate characters on a timeline"
        },
        "CreateJSDisplay": {
            "name": "CreateJSDisplay",
            "shortname": "CreateJSDisplay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/CreateJSDisplay.js",
            "line": 8,
            "description": "CreateJSDisplay is a display plugin for the CloudKid Framework \n\tthat uses the EaselJS library for rendering."
        },
        "DragManager": {
            "name": "DragManager",
            "shortname": "DragManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/DragManager.js",
            "line": 8,
            "description": "Drag manager is responsible for handling the dragging of stage elements.\nSupports click-n-stick (click to start, move mouse, click to release) and click-n-drag (standard dragging) functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "startCallback",
                    "description": "The callback when when starting",
                    "type": "Function"
                },
                {
                    "name": "endCallback",
                    "description": "The callback when ending",
                    "type": "Function"
                }
            ]
        },
        "TextureAtlas": {
            "name": "TextureAtlas",
            "shortname": "TextureAtlas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/TextureAtlas.js",
            "line": 3,
            "description": "Handles a spritesheet.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "image",
                    "description": "The image that all textures pull from.\n     This can also be an array of images, if the TextureAtlas should be built from several spritesheets.",
                    "type": "Image|HTMLCanvasElement|Array"
                },
                {
                    "name": "spritesheetData",
                    "description": "The JSON object describing the frames in the atlas.\n     This is expected to fit the JSON Hash format as exported from TexturePacker.\n     This can also be an array of data objects, if the TextureAtlas should be built from several spritesheets.",
                    "type": "Object|Array"
                }
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/TextureAtlas.js",
            "line": 145,
            "description": "A Texture - a specific portion of an image that can then be drawn by a Bitmap.\nThis class is hidden within TextureAtlas, and can't be manually created."
        }
    },
    "classitems": [
        {
            "file": "src/Animator.js",
            "line": 21,
            "description": "The current version of the Animator class",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 30,
            "description": "If we fire debug statements",
            "itemtype": "property",
            "name": "debug",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 39,
            "description": "The instance of cloudkid.Audio or cloudkid.Sound for playing audio along with animations.\nThis MUST be set in order to play synced animations.",
            "itemtype": "property",
            "name": "soundLib",
            "type": "cloudkid.Audio|cloudkid.Sound",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 49,
            "description": "The global captions object to use with animator",
            "itemtype": "property",
            "name": "captions",
            "type": "cloudkid.Captions",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 57,
            "description": "The collection of timelines",
            "itemtype": "property",
            "name": "_timelines",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 65,
            "description": "A collection of timelines for removal - kept out here so it doesn't need to be\nreallocated every frame",
            "itemtype": "property",
            "name": "_removedTimelines",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 74,
            "itemtype": "property",
            "name": "_timelinesMap",
            "type": "Dictionary",
            "access": "private",
            "tagname": "",
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 81,
            "description": "If the Animator is paused",
            "itemtype": "property",
            "name": "_paused",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 89,
            "description": "An empty object to avoid creating new objects in play()\nwhen an options object is not used for parameters.",
            "itemtype": "property",
            "name": "_optionsHelper",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 98,
            "description": "Sets the variables of the Animator to their defaults. Use when _timelines is null,\nif the Animator data was cleaned up but was needed again later.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 114,
            "description": "Stops all animations and cleans up the variables used.",
            "itemtype": "method",
            "name": "destroy",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 132,
            "description": "Play an animation for a frame label event",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to animate",
                    "type": "AnimatorTimeline"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose stop\")",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The object of optional parameters or onComplete callback function",
                    "type": "Object|function",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "The callback function when the animation is done",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "onCompleteParams",
                            "description": "Parameters to pass to onComplete function",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "startTime",
                            "description": "The time in milliseconds into the animation to start. A value of -1 makes the animation play at a random startTime.",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "speed",
                            "description": "The speed at which to play the animation.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "soundData",
                            "description": "soundData Data about a sound to sync the animation to, as an alias or in the format {alias:\"MyAlias\", start:0}.\n\t\tstart is the seconds into the animation to start playing the sound. If it is omitted or soundData is a string, it defaults to 0.",
                            "type": "Object|String",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "doCancelledCallback",
                            "description": "Should an overridden animation's callback function still run?",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "AnimatorTimeline"
            },
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 217,
            "description": "Play an animation for a frame label event, starting at a random frame within the animation",
            "itemtype": "method",
            "name": "playAtRandomFrame",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to animate.",
                    "type": "AnimatorTimeline"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose_stop\").",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The object of optional parameters or onComplete callback function",
                    "type": "Object|function",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "The callback function when the animation is done",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "onCompleteParams",
                            "description": "Parameters to pass to onComplete function",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "speed",
                            "description": "The speed at which to play the animation.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "soundData",
                            "description": "soundData Data about a sound to sync the animation to, as an alias or in the format {alias:\"MyAlias\", start:0}.\n\t\tstart is the seconds into the animation to start playing the sound. If it is omitted or soundData is a string, it defaults to 0.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "doCancelledCallback",
                            "description": "Should an overridden animation's callback function still run?",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "AnimatorTimeline"
            },
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 238,
            "description": "Creates the AnimatorTimeline for a given animation",
            "itemtype": "method",
            "name": "_makeTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to animate",
                    "type": "easeljs.MovieClip"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose stop\")",
                    "type": "String"
                },
                {
                    "name": "onComplete",
                    "description": "The function to callback when we're done",
                    "type": "Function"
                },
                {
                    "name": "onCompleteParams",
                    "description": "Parameters to pass to onComplete function",
                    "type": "Function"
                },
                {
                    "name": "speed",
                    "description": "The speed at which to play the animation.",
                    "type": "Number"
                },
                {
                    "name": "soundData",
                    "description": "Data about sound to sync the animation to.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "AnimatorTimeline"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 324,
            "description": "Determines if a given instance can be animated by Animator, to allow things that aren't\n\tMovieClips from EaselJS to be animated if they share the same API. Note - 'id' is a property with\n\ta unique value for each createjs.DisplayObject. If a custom object is made that does not inherit from DisplayObject,\n\tit needs to not have an id that is identical to anything from EaselJS.",
            "itemtype": "method",
            "name": "_canAnimate",
            "params": [
                {
                    "name": "instance",
                    "description": "The object to check for animation properties.",
                    "type": "easeljs.MovieClip"
                }
            ],
            "return": {
                "description": "If the instance can be animated or not.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 355,
            "description": "Checks if animation exists",
            "itemtype": "method",
            "name": "_makeTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to check",
                    "type": "easeljs.MovieClip"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose stop\")",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "does this animation exist?",
                "type": "Bool"
            },
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 388,
            "description": "Stop the animation.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "instance",
                    "description": "The MovieClip to stop the action on",
                    "type": "createjs.MovieClip"
                },
                {
                    "name": "doOnComplete",
                    "description": "If we are suppose to do the complete callback when stopping (default is false)",
                    "type": "Bool"
                }
            ],
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 414,
            "description": "Stop all current Animator animations.\nThis is good for cleaning up all animation, as it doesn't do a callback on any of them.",
            "itemtype": "method",
            "name": "stopAll",
            "params": [
                {
                    "name": "container",
                    "description": "Optional - specify a container to stop timelines contained within",
                    "type": "createjs.Container"
                }
            ],
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 440,
            "description": "Remove a timeline from the stack",
            "itemtype": "method",
            "name": "_remove",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "AnimatorTimeline"
                },
                {
                    "name": "doOnComplete",
                    "description": "If we do the on complete callback",
                    "type": "Bool"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 497,
            "description": "Pause all tweens which have been excuted by Animator.play()",
            "itemtype": "method",
            "name": "pause",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 518,
            "description": "Resumes all tweens executed by the Animator.play()",
            "itemtype": "method",
            "name": "resume",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 540,
            "description": "Pauses or unpauses all timelines that are children of the specified DisplayObjectContainer.",
            "itemtype": "method",
            "name": "pauseInGroup",
            "params": [
                {
                    "name": "paused",
                    "description": "If this should be paused or unpaused",
                    "type": "Bool"
                },
                {
                    "name": "container",
                    "description": "The container to stop timelines contained within",
                    "type": "createjs.Container"
                }
            ],
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 562,
            "description": "Get the timeline object for an instance",
            "itemtype": "method",
            "name": "getTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "MovieClip",
                    "type": "createjs.MovieClip"
                }
            ],
            "return": {
                "description": "The timeline",
                "type": "AnimatorTimeline"
            },
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 581,
            "description": "Whether the Animator class is currently paused.",
            "itemtype": "method",
            "name": "getPaused",
            "return": {
                "description": "if we're paused or not",
                "type": "Bool"
            },
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 592,
            "description": "Start the updating",
            "itemtype": "method",
            "name": "_startUpdate",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 605,
            "description": "Stop the updating",
            "itemtype": "method",
            "name": "_stopUpdate",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 618,
            "description": "The update every frame",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time in milliseconds since the last frame",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 710,
            "description": "The sound has been started",
            "itemtype": "method",
            "name": "onSoundStarted",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "AnimatorTimeline"
                }
            ],
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 722,
            "description": "The sound is done",
            "itemtype": "method",
            "name": "onSoundDone",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "AnimatorTimeline"
                }
            ],
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 735,
            "description": "Check to see if we have timeline",
            "itemtype": "method",
            "name": "_hasTimelines",
            "return": {
                "description": "if we have timelines",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/Animator.js",
            "line": 749,
            "description": "String representation of this class",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String"
            },
            "static": 1,
            "class": "Animator",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 20,
            "description": "The event to callback when we're done",
            "itemtype": "event",
            "name": "onComplete",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 27,
            "description": "The parameters to pass when completed",
            "itemtype": "property",
            "name": "onCompleteParams",
            "type": "Array",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 34,
            "description": "The event label",
            "itemtype": "property",
            "name": "event",
            "type": "String",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 41,
            "description": "The instance of the timeline to animate",
            "itemtype": "property",
            "name": "instance",
            "type": "AnimatorTimeline",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 48,
            "description": "The frame number of the first frame",
            "itemtype": "property",
            "name": "firstFrame",
            "type": "Int",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 55,
            "description": "The frame number of the last frame",
            "itemtype": "property",
            "name": "lastFrame",
            "type": "Int",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 62,
            "description": "If the animation loops - determined by looking to see if it ends in \" stop\" or \" loop\"",
            "itemtype": "property",
            "name": "isLooping",
            "type": "Bool",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 69,
            "description": "Ensure we show the last frame before looping",
            "itemtype": "property",
            "name": "isLastFrame",
            "type": "Bool",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 76,
            "description": "length of timeline in frames",
            "itemtype": "property",
            "name": "length",
            "type": "Int",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 83,
            "description": "If this timeline plays captions",
            "itemtype": "property",
            "name": "useCaptions",
            "type": "Bool",
            "readonly": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 91,
            "description": "If the timeline is paused.",
            "itemtype": "property",
            "name": "_paused",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 99,
            "description": "Sets and gets the animation's paused status.",
            "itemtype": "property",
            "name": "paused",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 120,
            "description": "The animation start time in seconds on the movieclip's timeline.",
            "itemtype": "property",
            "name": "startTime",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 126,
            "description": "The animation duration in seconds.",
            "itemtype": "property",
            "name": "duration",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 132,
            "description": "The animation speed. Default is 1.",
            "itemtype": "property",
            "name": "speed",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 138,
            "description": "The position of the animation in seconds.",
            "itemtype": "property",
            "name": "time",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 144,
            "description": "Sound alias to sync to during the animation.",
            "itemtype": "property",
            "name": "soundAlias",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 150,
            "description": "A sound instance object from cloudkid.Sound or cloudkid.Audio, used for tracking sound position.",
            "itemtype": "property",
            "name": "soundInst",
            "type": "Object",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 156,
            "description": "If the timeline will, but has yet to play a sound.",
            "itemtype": "property",
            "name": "playSound",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 162,
            "description": "The time (seconds) into the animation that the sound starts.",
            "itemtype": "property",
            "name": "soundStart",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/AnimatorTimeline.js",
            "line": 168,
            "description": "The time (seconds) into the animation that the sound ends",
            "itemtype": "property",
            "name": "soundEnd",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "AnimatorTimeline",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 67,
            "description": "Indicates whether this BitmapMovieClip should loop when it reaches the end of its timeline.",
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "default": "true",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 75,
            "description": "The current frame of the movieclip.",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 84,
            "description": "If true, the BitmapMovieClip's position will not advance when ticked.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "default": "false",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 92,
            "description": "If true, the BitmapMovieClip will advance its timeline during ticks. If false then it must be externally advanced.",
            "itemtype": "property",
            "name": "advanceDuringTicks",
            "type": "Boolean",
            "default": "true",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 100,
            "description": "By default BitmapMovieClip instances advance one frame per tick. Specifying a framerate for the BitmapMovieClip\nwill cause it to advance based on elapsed time between ticks as appropriate to maintain the target\nframerate.\n\nFor example, if a BitmapMovieClip with a framerate of 10 is placed on a Stage being updated at 40fps, then the BitmapMovieClip will\nadvance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\nvary slightly between frames.\n\nThis feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\npassed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "framerate",
            "type": "{Number}",
            "default": "0",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 130,
            "description": "When the BitmapMovieClip is framerate independent, this is the time elapsed from frame 0 in seconds.",
            "itemtype": "property",
            "name": "elapsedTime",
            "type": "Number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 148,
            "description": "By default BitmapMovieClip instances advance one frame per tick. Specifying a framerate for the BitmapMovieClip\nwill cause it to advance based on elapsed time between ticks as appropriate to maintain the target\nframerate.",
            "itemtype": "property",
            "name": "_framerate",
            "type": "{Number}",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 160,
            "description": "When the BitmapMovieClip is framerate independent, this is the total time in seconds for the animation.",
            "itemtype": "property",
            "name": "_duration",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 169,
            "description": "When the BitmapMovieClip is framerate independent, this is the time elapsed from frame 0 in seconds.",
            "itemtype": "property",
            "name": "_t",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 178,
            "itemtype": "property",
            "name": "_prevPosition",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 186,
            "description": "The Bitmap used to render the current frame of the animation.",
            "itemtype": "property",
            "name": "_bitmap",
            "type": "createjs.Bitmap",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 194,
            "description": "An array of frame labels.",
            "itemtype": "property",
            "name": "_labels",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 202,
            "description": "An array of textures.",
            "itemtype": "property",
            "name": "_frames",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 210,
            "description": "The current texture.",
            "itemtype": "property",
            "name": "_currentTexture",
            "type": "cloudkid.TextureAtlas.Texture",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 218,
            "description": "The origin point of the BitmapMovieClip.",
            "itemtype": "property",
            "name": "_origin",
            "type": "createjs.Point",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 226,
            "description": "A scale to apply to the images in the BitmapMovieClip\nto restore normal size (if spritesheet was exported at a smaller or larger size).",
            "itemtype": "property",
            "name": "_scale",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 237,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 249,
            "description": "Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 267,
            "description": "Sets paused to false.",
            "itemtype": "method",
            "name": "play",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 275,
            "description": "Sets paused to true.",
            "itemtype": "method",
            "name": "stop",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 283,
            "description": "Advances this movie clip to the specified position or label and sets paused to false.",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "The animation name or frame number to go to.",
                    "type": "String|Number"
                }
            ],
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 293,
            "description": "Advances this movie clip to the specified position or label and sets paused to true.",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "The animation or frame name to go to.",
                    "type": "String|Number"
                }
            ],
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 303,
            "description": "Advances the playhead. This occurs automatically each tick by default.",
            "params": [
                {
                    "name": "time",
                    "description": "The amount of time in ms to advance by. Only applicable if framerate is set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "advance",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 327,
            "description": "Returns a sorted list of the labels defined on this BitmapMovieClip. Shortcut to TweenJS: Timeline.getLabels();",
            "itemtype": "method",
            "name": "getLabels",
            "return": {
                "description": "A sorted array of objects with label and position (aka frame) properties.",
                "type": "Array[Object]"
            },
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 336,
            "description": "Returns the name of the label on or immediately before the current frame. See TweenJS: Timeline.getCurrentLabel()\nfor more information.",
            "itemtype": "method",
            "name": "getCurrentLabel",
            "return": {
                "description": "The name of the current label or null if there is no label.",
                "type": "String"
            },
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 355,
            "description": "Returns the name of the label on or immediately before the current frame. See TweenJS: Timeline.getCurrentLabel()\nfor more information.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "atlas",
                    "description": "The texture atlas to pull frames from.",
                    "type": "TextureAtlas"
                },
                {
                    "name": "data",
                    "description": "Initialization data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "fps",
                            "description": "Framerate to play the movieclip at. Omitting this will use the current framerate.",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "labels",
                            "description": "A dictionary of the labels in the movieclip to assist in playing animations.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "The origin of the movieclip.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{x:0,y:0}"
                        },
                        {
                            "name": "frames",
                            "description": "An array of frame sequences to pull from the texture atlas.",
                            "type": "Array",
                            "optional": true,
                            "props": [
                                {
                                    "name": "name",
                                    "description": "The name to use for the frame sequence. This should include a \"#\" to be replaced with the image number.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "min",
                                    "description": "The first frame number in the frame sequence.",
                                    "type": "Int",
                                    "optional": true
                                },
                                {
                                    "name": "max",
                                    "description": "The last frame number in the frame sequence.",
                                    "type": "Int",
                                    "optional": true
                                },
                                {
                                    "name": "digits",
                                    "description": "The maximum number of digits in the names of the frames, e.g. myAnim0001 has 4 digits.",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "4"
                                }
                            ]
                        },
                        {
                            "name": "scale",
                            "description": "The scale at which the art was exported, e.g. a scale of 1.4 means the art was increased\n         in size to 140% before exporting and should be scaled back down before drawing to the screen.\n\n Format for data:\n\t{\n\t\tfps:30,\n\t\tlabels:\n\t\t{\n\t\t\tanimStart:0,\n\t\t\tanimStart_loop:15\n\t\t},\n\t\torigin:{ x: 20, y:30 },\n\t\tframes:\n\t\t[\n\t\t\t{\n\t\t\t\tname:\"myAnim#\",\n\t\t\t\tmin:1,\n\t\t\t\tmax:20,\n\t\t\t\tdigits:4\n\t\t\t}\n\t\t]\n\t}\n\nThe object describes a 30 fps animation that is 20 frames long, and was originally myAnim0001.png->myAnim0020.png,\nwith frame labels on the first and 16th frame. 'digits' is optional, and defaults to 4.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ],
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 435,
            "description": "Copies the labels, textures, origin, and framerate from another BitmapMovieClip.\nThe labels and textures are copied by reference, instead of a deep copy.",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "other",
                    "description": "The movieclip to copy data from.",
                    "type": "BitmapMovieClip"
                }
            ],
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 452,
            "description": "Destroys the BitmapMovieClip, removing all children and nulling all reference variables.",
            "itemtype": "method",
            "name": "destroy",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 466,
            "itemtype": "method",
            "name": "_tick",
            "params": [
                {
                    "name": "props",
                    "description": "Properties to copy to the DisplayObject {{#crossLink \"DisplayObject/tick\"}}{{/crossLink}} event object.\nfunction.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 477,
            "itemtype": "method",
            "name": "_goto",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "The animation name or frame number to go to.",
                    "type": "String|Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 507,
            "itemtype": "method",
            "name": "_updateTimeline",
            "access": "protected",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapMovieClip.js",
            "line": 527,
            "itemtype": "method",
            "name": "_reset",
            "access": "private",
            "tagname": "",
            "class": "BitmapMovieClip",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapUtils.js",
            "line": 14,
            "description": "Replaces Bitmaps in the global lib dictionary with a version that pulls the image from a spritesheet.",
            "itemtype": "method",
            "name": "loadSpriteSheet",
            "static": 1,
            "params": [
                {
                    "name": "frameDict",
                    "description": "A dictionary of frame information, with frame, trimmed, \n\tand spriteSourceSize properties (like the JSON hash output from TexturePacker).",
                    "type": "Object"
                },
                {
                    "name": "spritesheetImage",
                    "description": "The spritesheet image that contains all of the frames.",
                    "type": "Image|HTMLCanvasElement"
                },
                {
                    "name": "scale",
                    "description": "The scale to apply to all sprites from the spritesheet. \n\tFor example, a half sized spritesheet should have a scale of 2.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "BitmapUtils",
            "module": "cloudkid"
        },
        {
            "file": "src/BitmapUtils.js",
            "line": 75,
            "description": "Replaces Bitmaps in the global lib dictionary with a version that uses a scaled bitmap, so you can load up\nsmaller bitmaps behind the scenes that are scaled back up to normal size, or high res bitmaps that are\nscaled down.",
            "itemtype": "method",
            "name": "replaceWithScaledBitmap",
            "static": 1,
            "params": [
                {
                    "name": "idOrDict",
                    "description": "A dictionary of Bitmap ids to replace, or a single id.",
                    "type": "String|Object"
                },
                {
                    "name": "scale",
                    "description": "The scale to apply to the image(s).",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "BitmapUtils",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 84,
            "description": "The sprite that is the body of the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "back",
            "type": "createjs.Bitmap",
            "readonly": "",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 92,
            "description": "The text field of the button. The label is centered by both width and height on the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "label",
            "type": "createjs.Text",
            "readonly": "",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 101,
            "description": "Callback for mouse over, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_overCB",
            "type": "Function",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 108,
            "description": "Callback for mouse out, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_outCB",
            "type": "Function",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 115,
            "description": "Callback for mouse down, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_downCB",
            "type": "Function",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 122,
            "description": "Callback for press up, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_upCB",
            "type": "Function",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 129,
            "description": "Callback for click, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_clickCB",
            "type": "Function",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 136,
            "description": "A dictionary of state booleans, keyed by state name.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateFlags",
            "type": "Object",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 142,
            "description": "An array of state names (Strings), in their order of priority.\nThe standard order previously was [\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"].",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_statePriority",
            "type": "Array",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 150,
            "description": "A dictionary of state graphic data, keyed by state name.\nEach object contains the sourceRect (src) and optionally 'trim', another Rectangle.\nAdditionally, each object will contain a 'label' object if the button has a text label.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateData",
            "type": "Object",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 159,
            "description": "The width of the button art, independent of the scaling of the button itself.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_width",
            "type": "Number",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 166,
            "description": "The height of the button art, independent of the scaling of the button itself.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_height",
            "type": "Number",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 173,
            "description": "An offset to button positioning, generally used to adjust for a highlight around the button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_offset",
            "type": "createjs.Point",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 180,
            "description": "An event for when the button is pressed (while enabled).",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "BUTTON_PRESS",
            "type": "String",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 203,
            "description": "Constructor for the button when using CreateJS.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "imageSettings",
                    "description": "See the constructor for more information",
                    "type": "Object|Image|HTMLCanvasElement",
                    "optional": true
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 357,
            "description": "The width of the button, based on the width of back. This value is affected by scale.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 368,
            "description": "The height of the button, based on the height of back. This value is affected by scale.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 379,
            "description": "Sets the text of the label. This does nothing if the button was not initialized with a label.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "The text to set the label to.",
                    "type": "String"
                }
            ],
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 413,
            "description": "Whether or not the button is enabled.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "default": "true",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 446,
            "description": "Adds a property to the button. Setting the property sets the value in\n_stateFlags and calls _updateState().",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_addProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "The property name to add to the button.",
                    "type": "String"
                }
            ],
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 468,
            "description": "Updates back based on the current button state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updateState",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 523,
            "description": "The callback for when the button receives a mouse down event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseDown",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 536,
            "description": "The callback for when the button for when the mouse/touch is released on the button\n- only when the button was held down initially.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseUp",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 551,
            "description": "The callback for when the button the button is clicked or tapped on. This is\nthe most reliable way of detecting mouse up/touch end events that are on this button\nwhile letting the pressup event handle the mouse up/touch ends on and outside the button.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onClick",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 563,
            "description": "The callback for when the button is moused over.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseOver",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 574,
            "description": "The callback for when the mouse leaves the button area.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseOut",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 585,
            "description": "Destroys the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/Button.js",
            "line": 605,
            "description": "Generates a desaturated up state as a disabled state, and an update with a solid colored glow for a highlighted state.",
            "itemtype": "method",
            "name": "generateDefaultStates",
            "static": 1,
            "params": [
                {
                    "name": "image",
                    "description": "The image to use for all of the button states, in the standard up/over/down format.",
                    "type": "Image|HTMLCanvasElement"
                },
                {
                    "name": "disabledSettings",
                    "description": "The settings object for the disabled state. If omitted, no disabled state is created.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "saturation",
                            "description": "The saturation adjustment for the disabled state. \n       100 is fully saturated, 0 is unchanged, -100 is desaturated.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "brightness",
                            "description": "The brightness adjustment for the disabled state. \n       100 is fully bright, 0 is unchanged, -100 is completely dark.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "contrast",
                            "description": "The contrast adjustment for the disabled state. \n       100 is full contrast, 0 is unchanged, -100 is no contrast.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "highlightSettings",
                    "description": "The settings object for the highlight state. If omitted, no state is created.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "How many pixels to make the glow, eg 8 for an 8 pixel increase on each side.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "red",
                            "description": "The red value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "green",
                            "description": "The green value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "blue",
                            "description": "The blue value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "alpha",
                            "description": "The alpha value for the glow, from 0 to 255, with 0 being transparent and 255 fully opaque.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Button",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterClip.js",
            "line": 23,
            "description": "The event to play",
            "itemtype": "property",
            "name": "event",
            "type": "String",
            "class": "CharacterClip",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterClip.js",
            "line": 30,
            "description": "The number of times to loop",
            "itemtype": "property",
            "name": "loops",
            "type": "Int",
            "class": "CharacterClip",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterClip.js",
            "line": 37,
            "description": "Initialiaze this character clip",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "event",
                    "description": "The frame label to play using Animator.play",
                    "type": "String"
                },
                {
                    "name": "loops",
                    "description": "The number of times to loop, default of 0 plays continuously",
                    "type": "Int"
                }
            ],
            "class": "CharacterClip",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 25,
            "description": "The current stack of animations to play",
            "itemtype": "property",
            "name": "_animationStack",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 33,
            "description": "The currently playing animation",
            "itemtype": "property",
            "name": "_currentAnimation",
            "type": "CharacterClip",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 41,
            "description": "Current number of loops for the current animation",
            "itemtype": "property",
            "name": "_loops",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 49,
            "description": "If the current animation choreographies can't be interrupted",
            "itemtype": "property",
            "name": "_interruptable",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 57,
            "description": "If frame dropping is allowed for this animation set",
            "itemtype": "property",
            "name": "_allowFrameDropping",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 65,
            "description": "The current character",
            "itemtype": "property",
            "name": "_character",
            "type": "createjs.MovieClip",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 73,
            "description": "Callback function for playing animation",
            "itemtype": "property",
            "name": "_callback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 81,
            "description": "If this instance has been destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 89,
            "description": "Initiliazes this Character controller",
            "itemtype": "method",
            "name": "initialize",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 99,
            "description": "Set the current character, setting to null clears character",
            "itemtype": "method",
            "name": "setCharacter",
            "params": [
                {
                    "name": "character",
                    "description": "MovieClip",
                    "type": "createjs.MovieClip"
                }
            ],
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 116,
            "description": "If we want to play a static frame",
            "itemtype": "method",
            "name": "gotoFrameAndStop",
            "params": [
                {
                    "name": "event",
                    "description": "The frame label to stop on",
                    "type": "String"
                }
            ],
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 130,
            "description": "Will play a sequence of animations",
            "itemtype": "method",
            "name": "playClips",
            "params": [
                {
                    "name": "clips",
                    "description": "an array of CharacterClip objects",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the animations are either done, or\n            have been interrupted. Will pass true is interrupted,\n            false if they completed",
                    "type": "Function"
                },
                {
                    "name": "interruptable",
                    "description": "If calling this can interrupt the current animation(s)",
                    "type": "Bool"
                },
                {
                    "name": "cancelPreviousCallback",
                    "description": "Cancel the callback the last time this was called",
                    "type": "Bool"
                },
                {
                    "name": "allowFrameDropping",
                    "description": "If frame dropping is allowed for this frame, if the Animator is doing frame drop checks",
                    "type": "Bool"
                }
            ],
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 173,
            "description": "Start the next animation in the sequence",
            "itemtype": "method",
            "name": "startNext",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 201,
            "description": "When the animation has completed playing",
            "itemtype": "method",
            "name": "_animationComplete",
            "access": "private",
            "tagname": "",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 227,
            "description": "Clear any animations for the current character",
            "itemtype": "method",
            "name": "clear",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CharacterController.js",
            "line": 245,
            "description": "Don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "CharacterController",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 37,
            "description": "the canvas managed by this display",
            "itemtype": "property",
            "name": "canvas",
            "type": "DOMElement",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 45,
            "description": "The DOM id for the canvas",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 53,
            "description": "Convenience method for getting the width of the canvas element\nwould be the same thing as canvas.width",
            "itemtype": "property",
            "name": "width",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 62,
            "description": "Convenience method for getting the height of the canvas element\nwould be the same thing as canvas.height",
            "itemtype": "property",
            "name": "height",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 71,
            "description": "The rendering library's stage element, the root display object",
            "itemtype": "property",
            "name": "",
            "type": "createjs.Stage|createjs.SpriteStage",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 79,
            "description": "If rendering is paused on this display only. Pausing all displays can be done\nusing Application.paused setter.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 87,
            "description": "The rate at which EaselJS calculates mouseover events, in times/second.",
            "itemtype": "property",
            "name": "mouseOverRate",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 94,
            "description": "If input is enabled on the stage.",
            "itemtype": "property",
            "name": "_enabled",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 101,
            "description": "If input is enabled on the stage for this display. The default is true.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 126,
            "description": "If the display is visible.",
            "itemtype": "property",
            "name": "_visible",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 133,
            "description": "If the display is visible, using \"display: none\" css on the canvas. Invisible displays won't render.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 147,
            "description": "Resizes the canvas, and tells the rendering library if it needs to know (PixiJS does)\nthis is only called by the Application",
            "itemtype": "method",
            "name": "resize",
            "internal": "",
            "params": [
                {
                    "name": "width",
                    "description": "The width that the display should be",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The height that the display should be",
                    "type": "Int"
                }
            ],
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 161,
            "description": "Updates the stage and draws it. Elapsed is a parameter because CreateJS needs it, PixiJS doesn't care.\nthis is only called by the Application. This method does nothing if paused is true.",
            "itemtype": "method",
            "name": "render",
            "internal": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/CreateJSDisplay.js",
            "line": 175,
            "description": "Destroy and don't use after this, this method is called by the Application and should \nnot be called directly, use Application.removeDisplay(id). \nThe stage recursively removes all display objects here.",
            "itemtype": "method",
            "name": "destroy",
            "internal": "",
            "class": "CreateJSDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 22,
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 25,
            "description": "The object that's being dragged",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "draggedObj",
            "type": "createjs.DisplayObject",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 33,
            "description": "The radius in pixel to allow for dragging, or else does sticky click",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dragStartThreshold",
            "default": "20",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 41,
            "description": "The position x, y of the mouse down on the stage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "mouseDownStagePos",
            "type": "Object",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 48,
            "description": "The position x, y of the object when interaction with it started.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "mouseDownObjPos",
            "type": "Object",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 55,
            "description": "If sticky click dragging is allowed.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "allowStickyClick",
            "type": "Bool",
            "default": "true",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 63,
            "description": "Is the move touch based",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isTouchMove",
            "type": "Bool",
            "default": "false",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 72,
            "description": "Is the drag being held on mouse down (not sticky clicking)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isHeldDrag",
            "type": "Bool",
            "default": "false",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 81,
            "description": "Is the drag a sticky clicking (click on a item, then mouse the mouse)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isStickyClick",
            "type": "Bool",
            "default": "false",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 90,
            "description": "Settings for snapping.\n\n Format for snapping to a list of points:\n\t{\n\t\tmode:\"points\",\n\t\tdist:20,//snap when within 20 pixels/units\n\t\tpoints:[\n\t\t\t{ x: 20, y:30 },\n\t\t\t{ x: 50, y:10 }\n\t\t]\n\t}",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "snapSettings",
            "type": "Object",
            "default": "null",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 109,
            "description": "Reference to the stage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_theStage",
            "type": "CreatejsStage",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 116,
            "description": "The local to global position of the drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragOffset",
            "type": "createjs.Point",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 123,
            "description": "Callback when we start dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragStartCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 130,
            "description": "Callback when we are done dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragEndCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 137,
            "description": "Callback to test for the start a held drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_triggerHeldDragCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 144,
            "description": "Callback to start a sticky click drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_triggerStickyClickCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 151,
            "description": "Callback when we are done with the drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stageMouseUpCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 158,
            "description": "The collection of draggable objects",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_draggableObjects",
            "type": "Array",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 165,
            "description": "The function call when the mouse/touch moves",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_updateCallback",
            "type": "Function",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 172,
            "description": "A point for reuse instead of lots of object creation.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_helperPoint",
            "type": "createjs.Point",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 179,
            "description": "Constructor",
            "itemtype": "method",
            "name": "initialize",
            "is_constructor": 1,
            "params": [
                {
                    "name": "startCallback",
                    "description": "The callback when when starting",
                    "type": "Function"
                },
                {
                    "name": "endCallback",
                    "description": "The callback when ending",
                    "type": "Function"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 200,
            "description": "Manually starts dragging an object. If a mouse down event is not supplied as the second argument, it \n   defaults to a held drag, that ends as soon as the mouse is released.",
            "itemtype": "method",
            "name": "startDrag",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "ev",
                    "description": "A mouse down event to listen to to determine what type of drag should be used.",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 213,
            "description": "Mouse down on an obmect",
            "itemtype": "method",
            "name": "_objMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "A mouse down event to listen to to determine what type of drag should be used.",
                    "type": "createjs.MouseEvent"
                },
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 269,
            "description": "Start the sticky click",
            "itemtype": "method",
            "name": "_triggerStickyClick",
            "access": "private",
            "tagname": "",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 282,
            "description": "Start hold dragging",
            "itemtype": "method",
            "name": "_triggerHeldDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "The mouse down event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 301,
            "description": "Internal start dragging on the stage",
            "itemtype": "method",
            "name": "_startDrag",
            "access": "private",
            "tagname": "",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 317,
            "description": "Stops dragging the currently dragged object.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stopDrag",
            "params": [
                {
                    "name": "doCallback",
                    "description": "If the drag end callback should be called. Default is false.",
                    "type": "Bool"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 328,
            "description": "Internal stop dragging on the stage",
            "itemtype": "method",
            "name": "_stopDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "Mouse up event",
                    "type": "createjs.MouseEvent"
                },
                {
                    "name": "doCallback",
                    "description": "If we should do the callback",
                    "type": "Bool"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 351,
            "description": "Update the object position based on the mouse",
            "itemtype": "method",
            "name": "_updateObjPosition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "Mouse move event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 383,
            "description": "Handles snapping the dragged object to the nearest among a list of points",
            "itemtype": "method",
            "name": "_handlePointSnap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "localMousePos",
                    "description": "The mouse position in the same space as the dragged object.",
                    "type": "createjs.Point"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 451,
            "description": "Adds properties and functions to the object - use enableDrag() and disableDrag() on \nobjects to enable/disable them (they start out disabled). Properties added to objects:\n_dragBounds (Rectangle), _onMouseDownListener (Function), _dragMan (cloudkid.DragManager) reference to the DragManager\nthese will override any existing properties of the same name",
            "itemtype": "method",
            "name": "addObject",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "bound",
                    "description": "The rectangle bounds",
                    "type": "createjs.Rectangle"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 482,
            "description": "Removes properties and functions added by addObject().",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 501,
            "description": "Destroy the manager",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/DragManager.js",
            "line": 537,
            "class": "DragManager",
            "module": "cloudkid"
        },
        {
            "file": "src/TextureAtlas.js",
            "line": 15,
            "description": "The an array of image elements (Image|HTMLCanvasElement) that frames in texture atlas use.",
            "itemtype": "property",
            "name": "_image",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "TextureAtlas",
            "module": "cloudkid"
        },
        {
            "file": "src/TextureAtlas.js",
            "line": 30,
            "description": "The dictionary of Textures that this atlas consists of.",
            "itemtype": "property",
            "name": "frames",
            "type": "Object",
            "class": "TextureAtlas",
            "module": "cloudkid"
        },
        {
            "file": "src/TextureAtlas.js",
            "line": 58,
            "description": "Handler when the skip button is pressed",
            "itemtype": "method",
            "name": "getFrame",
            "params": [
                {
                    "name": "name",
                    "description": "The frame name to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The texture by that name, or null if it doesn't exist.",
                "type": "cloudkid.TextureAtlas.Texture"
            },
            "class": "TextureAtlas",
            "module": "cloudkid"
        },
        {
            "file": "src/TextureAtlas.js",
            "line": 69,
            "description": "Get an array of Textures that match a specific name.",
            "itemtype": "method",
            "name": "getFrames",
            "params": [
                {
                    "name": "name",
                    "description": "The base name of all frames to look for, like \"anim_#\" to search for an animation exported\n       as anim_0001.png (the \".png\" is dropped when the TextureAtlas is loaded).",
                    "type": "String"
                },
                {
                    "name": "numberMin",
                    "description": "The number to start on while looking for frames. Flash generally starts at 1.",
                    "type": "Int"
                },
                {
                    "name": "numberMax",
                    "description": "The number to go until while looking for frames. \n       If your animation runs from frame 0001 to frame 0014, numberMax would be 14.",
                    "type": "Int"
                },
                {
                    "name": "maxDigits",
                    "description": "Maximum number of digits, like 4 for an animation exported as anim_0001.png",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "4"
                },
                {
                    "name": "outArray",
                    "description": "If already using an array, this can fill it instead of creating a new one.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "An collection of cloudkid.TextureAtlas.Textures.",
                "type": "Array"
            },
            "class": "TextureAtlas",
            "module": "cloudkid"
        },
        {
            "file": "src/TextureAtlas.js",
            "line": 152,
            "description": "The image element that this texture references.",
            "itemtype": "property",
            "name": "image",
            "type": "Image|HTMLCanvasElement",
            "class": "Texture",
            "module": "cloudkid"
        },
        {
            "file": "src/TextureAtlas.js",
            "line": 158,
            "description": "The frame rectangle within the image.",
            "itemtype": "property",
            "name": "frame",
            "type": "createjs.Rectangle",
            "class": "Texture",
            "module": "cloudkid"
        },
        {
            "file": "src/TextureAtlas.js",
            "line": 163,
            "description": "If this texture has been trimmed.",
            "itemtype": "property",
            "name": "trimmed",
            "type": "Boolean",
            "class": "Texture",
            "module": "cloudkid"
        },
        {
            "file": "src/TextureAtlas.js",
            "line": 168,
            "description": "The offset that the trimmed sprite should be placed at to restore it to the untrimmed position.",
            "itemtype": "property",
            "name": "offset",
            "type": "createjs.Point",
            "class": "Texture",
            "module": "cloudkid"
        },
        {
            "file": "src/TextureAtlas.js",
            "line": 173,
            "description": "The width of the untrimmed texture.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Texture",
            "module": "cloudkid"
        },
        {
            "file": "src/TextureAtlas.js",
            "line": 178,
            "description": "The height of the untrimmed texture.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "Texture",
            "module": "cloudkid"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:98"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:114"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:132"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:217"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:238"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:324"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:355"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:388"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:414"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:440"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:497"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:518"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:540"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:562"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:581"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:592"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:605"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:618"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:735"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/Animator.js:749"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterClip.js:37"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:89"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:99"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:116"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:130"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:173"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:201"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:227"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/CharacterController.js:245"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/CreateJSDisplay.js:147"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/CreateJSDisplay.js:161"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/CreateJSDisplay.js:175"
        },
        {
            "message": "Missing item type",
            "line": " src/DragManager.js:22"
        },
        {
            "message": "Missing item type",
            "line": " src/DragManager.js:537"
        }
    ]
}